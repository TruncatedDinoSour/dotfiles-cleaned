#!/usr/bin/env python3
"""Get info about a file"""

import grp
import os
import pwd
import sys
from typing import Any, Dict

import magic
from colorama import Fore
from colorama import init as colorama_init

colorama_init()


def log(msg: str, clr: str = Fore.GREEN, buffer: Any = sys.stderr) -> None:
    """Print a log message"""
    buffer.write(f" {clr}*{Fore.RESET} {msg}\n")


def get_file_info(path: str) -> None:
    """Get file info of a specified file, print it to STDOUT"""
    log(path, Fore.MAGENTA)

    path = os.path.expanduser(path)
    size = os.path.getsize(path)
    stat = os.stat(path)

    info: Dict[str, Dict[str, Any]] = {
        "File path": {
            "Inode": stat.st_ino,
            "Device inode": stat.st_dev,
            "File extension": os.path.splitext(path)[1],
            "Base directory": os.path.split(path)[0],
            "Base name": os.path.basename(path),
            "Expanded path": path,
            "Relative path": os.path.relpath(path),
            "Absolute path": os.path.abspath(path),
        },
        "Properties": {
            "Is file": os.path.isfile(path),
            "Is directory": os.path.isdir(path),
            "Is (sym)link": os.path.islink(path),
            "Is mounted": os.path.ismount(path),
            "Exists": os.path.exists(path),
        },
        "Size (in 1024b blocks)": {
            "B": size,
            "KB": size / 1024,
            "MB": size / (1024 ** 2),
            "GB": size / (1024 ** 3),
            "TB": size / (1024 ** 4),
            "PB": size / (1024 ** 5),
        },
        "Size (in 1000b blocks)": {
            "Bi": size * 8,
            "KiB": size / 1000,
            "MiB": size / (1000 ** 2),
            "GiB": size / (1000 ** 3),
            "TiB": size / (1000 ** 4),
            "PiB": size / (1000 ** 5),
        },
        "Permissions": {
            "Mode": stat.st_mode,
            "Owner UID": stat.st_uid,
            "Owner GID": stat.st_gid,
            "Owner username": pwd.getpwuid(stat.st_uid).pw_name,
            "Owner group name": grp.getgrgid(stat.st_gid).gr_name,
        },
        "Access time": {
            "Last access time": stat.st_atime,
            "Last modification time": stat.st_mtime,
            "CTime": stat.st_ctime,
        },
        "File content": {
            "MIME type": magic.Magic(mime=True).from_file(path),
        },
    }

    try:
        with open(path, "r") as file:
            info["File content"]["Encoding"] = file.encoding

            read = file.readlines()
            info["File content"].update(
                {"Line count": len(read), "Character count": len("".join(read))}
            )
    except (UnicodeDecodeError, OSError):
        pass

    if os.path.islink(path):
        info["File path"]["Link target"] = os.readlink(path)

    for header, data in info.items():
        log(header, Fore.LIGHTRED_EX, sys.stdout)

        for name, value in data.items():
            log(f"{name}: {value}", f"\t{Fore.LIGHTBLUE_EX}", buffer=sys.stdout)


def main() -> int:
    """Entry/main function"""
    if len(sys.argv) < 2:
        log("Needs at least one file as an argument.", Fore.RED)
        return 1

    for idx, file in enumerate(sys.argv[1:]):
        get_file_info(file)

        if idx < len(sys.argv) - 2:
            print()

    return 0


if __name__ == "__main__":
    assert main.__annotations__.get("return") is int, "main() should return an integer"
    sys.exit(main())
