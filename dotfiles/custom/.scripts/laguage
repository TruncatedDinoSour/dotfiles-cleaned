#!/usr/bin/env python3

"""
REQUIREMENTS:
    * colorama
    * pyperclip
"""

from optparse import OptionParser
from sys import argv
from colorama import Fore

import base64
import random
import pyperclip


COMMANDS = {"e": lambda *args: "break"}
COMMAND_DELIM = "@"


def shell(name: str) -> str:
    print(f"{Fore.GREEN}Welcome to the {name} meta-shell.{Fore.RESET}")
    print(f"Type {COMMAND_DELIM}e to exit or any text to encode...\n")

    string = ""
    while True:
        print()
        command = input(f"{Fore.BLUE}$ {Fore.RESET}")

        if (
            command.startswith(COMMAND_DELIM)
            and input("Enter command mode [y/N]: ").lower() == "y"
        ):
            try:
                ret = COMMANDS[command[len(COMMAND_DELIM)]](*command.split()[1:])
                if ret == "break":
                    break
            except KeyError:
                print("[*] Command not found")
                continue

        string += f"{command}\n"

    return string


def encode(*args):
    value = shell("encoder")

    charcodes = ":".join([str(float(ord(charcode)) / 2) for charcode in value])

    def parse(cc: str) -> str:
        final = cc[::-1]
        final = base64.b85encode(bytes(final, "latin-1")).decode()
        final = final.swapcase()
        final = base64.b64encode(bytes(final, "latin-1")).decode()[::-1]
        final = final.swapcase()

        extra = random.randint(-3, 3)

        final = (
            str(extra)
            + " "
            + "".join([chr(((ord(char) - 1) + extra) - (extra * 2)) for char in final])[
                ::-1
            ]
        )

        if input("Copy to clipboard [Y/n]: ").lower() != "n":
            pyperclip.copy(final)

        return final.replace('`', "_")

    print(parse(charcodes))


def decode(*args):
    value = shell("decoder")

    def parse(es: str) -> str:
        extra = int(es.split()[0])
        final = "".join(es.split()[1:]).replace("_", '`')

        final = "".join(
            [chr(((ord(char) + 1) - extra) + (extra * 2)) for char in final]
        )
        final = final.swapcase()
        final = base64.b64decode(final.encode("latin-1")).decode()[::-1]
        final = final.swapcase()
        final = base64.b85decode(bytes(final[::-1], "latin-1")).decode("latin-1")[::-1]

        final = "".join(
            [chr(int(float(charcode) * 2)) for charcode in final.split(":")]
        )

        return final

    print(parse(value))


def args():
    parser = OptionParser(description="An encoder")
    parser.add_option(
        "-d",
        "--decode",
        dest="decode",
        help="Decode a string",
        action="callback",
        callback=decode,
    )
    parser.add_option(
        "-c",
        "--encode",
        dest="encode",
        help="Encode a string",
        action="callback",
        callback=encode,
    )

    if not argv[1:]:
        parser.print_help()

    return parser.parse_args()[0]


def main():
    args()


if __name__ == "__main__":
    main()

