#!/bin/bash

autorun() {
    /usr/bin/yafetch 2>/dev/null || return
}

ps_one() {
    local c_status="$?"
    local git="$(git rev-parse --abbrev-ref HEAD 2>/dev/null || true)"
    local venv="$(basename "$VIRTUAL_ENV")"
    local dir='\W'
    local propt_char='#'
    local user_colour="${GREEN}"

    [[ $UID != '0' ]] && local propt_char='%'
    [[ $c_status != '0' ]] && local propt_colour="${RED}$c_status "
    [[ "$git" ]] && local dir="($git) $dir"
    [[ "$venv" ]] && local extra="{${GREEN}$venv${RESTORE}} "
    [[ $UID == '0' ]] && local user_colour="${RED}"

    export PS1="\n${extra}${user_colour}\u${RESTORE}@\h ${dir} ${propt_colour}${propt_char}${RESTORE} "
}

man() {
    # \E[...m = ANSI colour
    # \x1b[38;2;...;...;...m = RGB colours
    env LESS_TERMCAP_mb=$'\E[01;31m' \
        LESS_TERMCAP_md=$'\E[01;36m' \
        LESS_TERMCAP_me=$'\E[0m' \
        LESS_TERMCAP_se=$'\E[0m' \
        LESS_TERMCAP_so=$'\x1b[38;2;128;128;128m' \
        LESS_TERMCAP_ue=$'\E[0m' \
        LESS_TERMCAP_us=$'\E[04;36;146m' \
        man "$@"
}

tty_autorun() {
    vecho 'running TTY autorun'

    # TTY theme
    echo -en "\e]P0282828" #black
    echo -en "\e]P88F9494" #darkgrey
    echo -en "\e]P1AF5f5F" #darkred
    echo -en "\e]P9bb6868" #red
    echo -en "\e]P287875F" #darkgreen
    echo -en "\e]PA87875F" #green
    echo -en "\e]P3D7AF87" #brown
    echo -en "\e]PBbCBC6C" #yellow
    echo -en "\e]P4666C7F" #darkblue
    echo -en "\e]PC666C7F" #blue
    echo -en "\e]P5A1456E" #darkmagenta
    echo -en "\e]PDA1456E" #magenta
    echo -en "\e]P687875F" #darkcyan
    echo -en "\e]PE87875F" #cyan
    echo -en "\e]P7DDD0C0" #lightgrey
    echo -en "\e]PFDDD0C0" #white
    clear                  #for background artifacting
}

mkkernel() {
    cd /usr/src/linux || exit 1
    $__BASH_RUNAS "$__BASH_BIN_DIR"/make "$@"
    $__BASH_RUNAS "$__BASH_BIN_DIR"/make modules_install
    $__BASH_RUNAS "$__BASH_BIN_DIR"/make install
    $__BASH_RUNAS "$__BASH_BIN_DIR"/dracut --force
    $__BASH_RUNAS /usr/sbin/grub-mkconfig -o /boot/grub/grub.cfg
}

vs() {
    back="$(pwd)"
    scriptdir="$HOME/.scripts"
    script="$(find "$scriptdir" -maxdepth 1 -type f | fzf)"

    if [[ "$script" ]]; then
        $EDITOR "$script"
        history -s "$EDITOR '$script'"
    fi

    cd "$back" || exit 2
}

vv() {
    file="$(fzf)"

    if [[ "$file" ]]; then
        $EDITOR "$file"
        history -s "$EDITOR '$file'"
    fi
}

pip_upgrade() {
    "$__BASH_BIN_DIR"/python3 -m pip list |
        "$__BASH_BIN_DIR"/awk '{ print $1  }' |
        sed '/portage/d' |
        "$__BASH_BIN_DIR"/tail -n +3 >/tmp/requirements.txt

    "$__BASH_BIN_DIR"/python3 -m pip install --user --upgrade -r /tmp/requirements.txt

    "$__BASH_CORE_BIN_DIR"/rm -f /tmp/requirements.txt
}

dlt() {
    local name="$RANDOM"
    read -p "This will delete $1 perminatly, are you sure you want to do this? (type 'yes, please delete $1, do as I say $name' in all caps without the quates to confirm): " confirm

    [[ $confirm != "YES, PLEASE DELETE ${1^^}, DO AS I SAY $name" ]] && return 1

    bzip2 "$1" -f -9 -z -p -v
    mv "${1}.bz2" "$1"

    xz "$1" -f -9e -T0 -v
    mv "${1}.xz" "$1"

    xz "$1" -f -9e -T0 -v --format=raw --suffix=.o
    mv "${1}.o" "$1"

    local content
    content="$(shuf -z "$1" | tr -d "\0")"
    echo "$content" >"$1"

    shred -fvzun "$((RANDOM % 12127))" "${1}"
}

NO() {
    mkdir -p ~/Documents/no

    echo "I am sorry to hear that, tell me what's wrong"
    sleep 1

    ${EDITOR:-vim} ~/Documents/no/"$(date "+feel-%N%S%V%I%m%Y$RANDOM.md")"

    echo 'Thank you, I will save this memory :), Hope you feel better soon'
}
